name: CodeCraft AI - CI/CD

on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - prod

env:
  AWS_REGION: af-south-1
  API_ECR_REPOSITORY: codecraft-ai-api
  INGESTION_ECR_REPOSITORY: codecraft-ai-ingestion
  CDK_ENV: ${{ (github.event_name == 'push' && 'prod') || github.event.inputs.environment }}

permissions:
  contents: read
  id-token: write

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Set Poetry to use in-project virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Cache Poetry virtualenv
        uses: actions/cache@v4
        with:
          path: |
            .venv
            ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}

      - name: Bootstrap dependencies
        run: poetry install --with dev

      - name: Ensure pre-commit is installed
        run: poetry run pip show pre-commit || poetry add --group dev pre-commit

      - name: Run linter
        run: poetry run ruff check . && poetry run ruff format --check . && poetry run mypy .

      - name: Run tests
        run: poetry run pytest

      - name: Run notebook tests with nbval
        run: poetry run pytest --nbval notebooks/ai_demo.ipynb

      - name: Run pip-audit
        run: poetry run pip-audit

      - name: Run Safety vulnerability scan
        run: poetry run safety check

      - name: Run pre-commit checks
        run: poetry run pre-commit run --all-files

  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsCdkDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Push environment config to SSM Parameter Store
        run: |
          pip install nox poetry
          nox -s push_config_to_ssm -- --env ${{ env.CDK_ENV }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        id: login-ecr

      - name: Build and Push API Image
        run: make build-and-push-api ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}

      - name: Build and Push Ingestion Image
        run: make build-and-push-ingestion ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Poetry
        run: pip install poetry

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsCdkDeployRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Install CDK dependencies
        run: poetry install --only main

      - name: Deploy CDK stack
        run: poetry run make cdk-deploy CDK_ENV=${{ env.CDK_ENV }}

      - name: Force new ECS deployment
        id: ecs_deploy
        run: |
          stackName=$(jq -r 'to_entries[] | select(.key | test("StatelessStack")) | .key' cdk-outputs.json)
          clusterName=$(jq -r --arg stackName "$stackName" '.[$stackName].EcsClusterName' cdk-outputs.json)
          serviceName=$(jq -r --arg stackName "$stackName" '.[$stackName].ApiServiceName' cdk-outputs.json)
          subnets=$(jq -r --arg stackName "$stackName" '.[$stackName].PrivateSubnetIds' cdk-outputs.json)
          echo "Forcing new deployment for service $serviceName in cluster $clusterName..."
          aws ecs update-service --cluster $clusterName --service $serviceName --force-new-deployment
